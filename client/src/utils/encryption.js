import CryptoJS from 'crypto-js';

// Sabit bir anahtar (fallback iÃ§in)
const FALLBACK_SECRET = 'your-very-long-and-secure-secret-key-2024';

// Ä°ki kullanÄ±cÄ± arasÄ±ndaki mesajlar iÃ§in ortak anahtar oluÅŸtur
const generateConversationKey = (userId1, userId2) => {
  // KullanÄ±cÄ± ID'lerini sÄ±rala ve birleÅŸtir
  const sortedIds = [userId1, userId2].sort().join('_');
  const secret = process.env.REACT_APP_ENCRYPTION_SECRET || FALLBACK_SECRET;
  
  try {
    const hmac = CryptoJS.HmacSHA256(sortedIds, secret);
    return hmac.toString();
  } catch (error) {
    console.error('Anahtar oluÅŸturma hatasÄ±:', error);
    // Fallback olarak basit bir hash kullan
    return CryptoJS.SHA256(sortedIds + secret).toString();
  }
};

// MesajÄ± ÅŸifrele
export const encryptMessage = (message, senderId, recipientId) => {
  try {
    const conversationKey = generateConversationKey(senderId, recipientId);
    const encrypted = CryptoJS.AES.encrypt(message, conversationKey).toString();
    return encrypted;
  } catch (error) {
    console.error('Åžifreleme hatasÄ±:', error);
    return message; // Åžifreleme baÅŸarÄ±sÄ±z olursa orijinal mesajÄ± dÃ¶ndÃ¼r
  }
};

// MesajÄ± Ã§Ã¶z
export const decryptMessage = (encryptedMessage, senderId, recipientId) => {
  try {
    const conversationKey = generateConversationKey(senderId, recipientId);
    const decrypted = CryptoJS.AES.decrypt(encryptedMessage, conversationKey);
    return decrypted.toString(CryptoJS.enc.Utf8);
  } catch (error) {
    console.error('Mesaj Ã§Ã¶zme hatasÄ±:', error);
    return 'ðŸ”’ ÅžifrelenmiÅŸ mesaj';
  }
}; 